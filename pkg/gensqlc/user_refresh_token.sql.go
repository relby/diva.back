// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_refresh_token.sql

package gensqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRefreshTokenById = `-- name: DeleteRefreshTokenById :exec
DELETE FROM user_refresh_tokens WHERE id = $1
`

func (q *Queries) DeleteRefreshTokenById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenById, id)
	return err
}

const selectUserRefreshTokenById = `-- name: SelectUserRefreshTokenById :one
SELECT id, user_id, expires_at FROM user_refresh_tokens
WHERE id = $1
LIMIT 1
`

func (q *Queries) SelectUserRefreshTokenById(ctx context.Context, id uuid.UUID) (*UserRefreshToken, error) {
	row := q.db.QueryRow(ctx, selectUserRefreshTokenById, id)
	var i UserRefreshToken
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return &i, err
}

const upsertUserRefreshToken = `-- name: UpsertUserRefreshToken :exec
INSERT INTO user_refresh_tokens (id, user_id, expires_at)
VALUES ($1, $2, $3)
ON CONFLICT (id)
DO UPDATE SET user_id = $2, expires_at = $3
`

type UpsertUserRefreshTokenParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) UpsertUserRefreshToken(ctx context.Context, arg UpsertUserRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, upsertUserRefreshToken, arg.ID, arg.UserID, arg.ExpiresAt)
	return err
}
