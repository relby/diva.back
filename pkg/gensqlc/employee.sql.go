// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: employee.sql

package gensqlc

import (
	"context"

	"github.com/google/uuid"
)

const selectEmployeeByID = `-- name: SelectEmployeeByID :one
SELECT users.id, users.full_name, employees.user_id, employees.access_key, employees.permissions FROM employees
INNER JOIN users ON employees.user_id = users.id
WHERE users.id = $1
LIMIT 1
`

type SelectEmployeeByIDRow struct {
	User     User
	Employee Employee
}

func (q *Queries) SelectEmployeeByID(ctx context.Context, id uuid.UUID) (*SelectEmployeeByIDRow, error) {
	row := q.db.QueryRow(ctx, selectEmployeeByID, id)
	var i SelectEmployeeByIDRow
	err := row.Scan(
		&i.User.ID,
		&i.User.FullName,
		&i.Employee.UserID,
		&i.Employee.AccessKey,
		&i.Employee.Permissions,
	)
	return &i, err
}

const selectEmployees = `-- name: SelectEmployees :many
SELECT users.id, users.full_name, employees.user_id, employees.access_key, employees.permissions FROM employees
INNER JOIN users ON employees.user_id = users.id
`

type SelectEmployeesRow struct {
	User     User
	Employee Employee
}

func (q *Queries) SelectEmployees(ctx context.Context) ([]*SelectEmployeesRow, error) {
	rows, err := q.db.Query(ctx, selectEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SelectEmployeesRow
	for rows.Next() {
		var i SelectEmployeesRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.FullName,
			&i.Employee.UserID,
			&i.Employee.AccessKey,
			&i.Employee.Permissions,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertEmployee = `-- name: UpsertEmployee :exec
INSERT INTO employees (user_id, access_key, permissions)
VALUES ($1, $2, $3)
ON CONFLICT (user_id)
DO UPDATE SET access_key = $2, permissions = $3
`

type UpsertEmployeeParams struct {
	UserID      uuid.UUID
	AccessKey   string
	Permissions []EmployeePermission
}

func (q *Queries) UpsertEmployee(ctx context.Context, arg UpsertEmployeeParams) error {
	_, err := q.db.Exec(ctx, upsertEmployee, arg.UserID, arg.AccessKey, arg.Permissions)
	return err
}
